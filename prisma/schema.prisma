generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Stream {
  STREAM_ID         Int            @id @default(autoincrement())
  STREAM_NAME       String?        @db.Char(50)
  STREAM_CREATED_BY Int
  STREAM_CREATED_DT DateTime       @default(now())
  STREAM_UPDATED_BY Int?
  STREAM_UPDATED_DT DateTime?
  lang_code         String         @default("en") @db.VarChar(5)
  translations      stream_lang[]
}

model stream_lang {
  id                Int       @map("STREAM_ID")
  STREAM_NAME       String?   @db.Char(50)
  STREAM_CREATED_BY Int
  STREAM_CREATED_DT DateTime  @db.DateTime(0)
  STREAM_UPDATED_BY Int?
  STREAM_UPDATED_DT DateTime? @db.DateTime(0)
  lang_code         String    @db.VarChar(5)
  stream            Stream    @relation(fields: [id], references: [STREAM_ID], onDelete: Cascade, onUpdate: Restrict)

  @@id([id, lang_code])
}

model Education {
  EDUCATION_ID         Int             @id @default(autoincrement())
  EDUCATION_NAME       String?         @db.Char(50)
  EDUCATION_IMAGE_URL  String?         @db.VarChar(255)
  EDUCATION_CREATED_BY Int
  EDUCATION_CREATED_DT DateTime        @default(now())
  EDUCATION_UPDATED_BY Int?
  EDUCATION_UPDATED_DT DateTime?
  lang_code            String          @default("en") @db.VarChar(5)
  translations         education_lang[]
}

model education_lang {
  id                   Int       @map("EDUCATION_ID")
  EDUCATION_NAME       String?   @db.Char(50)
  EDUCATION_IMAGE_URL  String?   @db.VarChar(255)
  EDUCATION_CREATED_BY Int
  EDUCATION_CREATED_DT DateTime  @db.DateTime(0)
  EDUCATION_UPDATED_BY Int?
  EDUCATION_UPDATED_DT DateTime? @db.DateTime(0)
  lang_code            String    @db.VarChar(5)
  education            Education @relation(fields: [id], references: [EDUCATION_ID], onDelete: Cascade, onUpdate: Restrict)

  @@id([id, lang_code])
}

model Profession {
  PROF_ID         Int              @id @default(autoincrement())
  PROF_DESC       String?          @db.Char(50)
  PROF_ACTIVE_YN  String           @db.Char(1)
  PROF_CREATED_BY Int
  PROF_CREATED_DT DateTime         @default(now())
  PROF_UPDATED_BY Int?
  PROF_UPDATED_DT DateTime?
  PROF_NAME       String?          @db.Char(50)
  PeopleRegistry  PeopleRegistry[]
  lang_code       String           @default("en") @db.VarChar(5)
  translations    profession_lang[]

  @@map("PROFESSION")
}

model profession_lang {
  id             Int        @map("PROF_ID")
  PROF_DESC      String?    @db.Char(50)
  PROF_NAME      String?    @db.Char(50)
  PROF_ACTIVE_YN String     @db.Char(1)
  PROF_CREATED_BY Int
  PROF_CREATED_DT DateTime  @db.DateTime(0)
  PROF_UPDATED_BY Int?
  PROF_UPDATED_DT DateTime? @db.DateTime(0)
  lang_code      String     @db.VarChar(5)
  profession     Profession @relation(fields: [id], references: [PROF_ID], onDelete: Cascade, onUpdate: Restrict)

  @@id([id, lang_code])
}

model PeopleRegistry {
  PR_ID              Int              @id @default(autoincrement())
  PR_UNIQUE_ID       String           @db.VarChar(50)
  PR_ROLE            PR_ROLE          @default(End_User)
  PR_FULL_NAME       String           @db.VarChar(100)
  PR_DOB             String
  PR_GENDER          String?          @db.Char(1)
  PR_MOBILE_NO       String           @db.VarChar(15)
  PR_EDUCATION       String?          @db.VarChar(20)
  PR_ADDRESS         String           @db.Text
  PR_PIN_CODE        String
  PR_CITY_CODE       Int?
  PR_STATE_CODE      String?          @db.Char(20)
  PR_DISTRICT_CODE   String?          @db.Char(20)
  PR_FAMILY_NO       String?          @db.Char(4)
  PR_MEMBER_NO       String?          @db.Char(4)
  PR_FATHER_ID       Int?
  PR_MOTHER_ID       Int?
  PR_SPOUSE_ID       Int?
  PR_FATHER_NAME     String?          @db.VarChar(100)
  PR_MOTHER_NAME     String?          @db.VarChar(100)
  PR_SPOUSE_NAME     String?          @db.VarChar(100)
  PR_PHOTO_URL       String?          @db.VarChar(255)
  PR_CREATED_BY      Int?
  PR_CREATED_AT      DateTime         @default(now())
  PR_UPDATED_BY      Int?
  PR_UPDATED_AT      DateTime?
  PR_AREA_NAME       String           @db.VarChar(100)
  PR_EDUCATION_DESC  String?          @db.VarChar(500)
  PR_PROFESSION_DETA String?          @db.VarChar(500)
  PR_PROFESSION_ID   Int?
  PR_BUSS_INTER      String?          @db.Char(1)
  PR_BUSS_STREAM     String?          @db.VarChar(20)
  PR_BUSS_TYPE       String?          @db.VarChar(20)
  PR_BUSS_CODE       Int?
  PR_MARRIED_YN      String?          @db.Char(1)
  PR_HOBBY           String?          @db.VarChar(200)
  PR_IS_COMPLETED    String?          @default("N") @db.Char(1)
  PR_PR_ID           Int?
  PR_NOTIFICATION    String?          @default("Y") @db.Char(1)
  Contact            Contact[]
  Children           Child[]          @relation("UserChildren")
  FcmToken           FcmToken[]
  BUSSINESS          BUSSINESS?       @relation(fields: [PR_BUSS_CODE], references: [BUSS_ID])
  City               City?            @relation(fields: [PR_CITY_CODE], references: [CITY_ID])
  Father             PeopleRegistry?  @relation("FatherRelation", fields: [PR_FATHER_ID], references: [PR_ID])
  FatherOf           PeopleRegistry[] @relation("FatherRelation")
  Mother             PeopleRegistry?  @relation("MotherRelation", fields: [PR_MOTHER_ID], references: [PR_ID])
  MotherOf           PeopleRegistry[] @relation("MotherRelation")
  Profession         Profession?      @relation(fields: [PR_PROFESSION_ID], references: [PROF_ID])
  Spouse             PeopleRegistry?  @relation("SpouseRelation", fields: [PR_SPOUSE_ID], references: [PR_ID])
  PeopleRegistry     PeopleRegistry[] @relation("SpouseRelation")
  PR_LANG String? @default("en") @db.Char(2)

  @@unique([PR_MOBILE_NO, PR_FULL_NAME])
  @@index([PR_STATE_CODE])
  @@index([PR_DISTRICT_CODE])
  @@index([PR_BUSS_CODE], map: "PEOPLE_REGISTRY_PR_BUSS_CODE_fkey")
  @@index([PR_CITY_CODE], map: "PEOPLE_REGISTRY_PR_CITY_CODE_fkey")
  @@index([PR_FATHER_ID], map: "PEOPLE_REGISTRY_PR_FATHER_ID_fkey")
  @@index([PR_MOTHER_ID], map: "PEOPLE_REGISTRY_PR_MOTHER_ID_fkey")
  @@index([PR_PROFESSION_ID], map: "PEOPLE_REGISTRY_PR_PROFESSION_ID_fkey")
  @@index([PR_SPOUSE_ID], map: "PEOPLE_REGISTRY_PR_SPOUSE_ID_fkey")
  @@map("PEOPLE_REGISTRY")
}

model FcmToken {
  id        Int            @id @default(autoincrement())
  PR_ID     Int
  fcmToken  String
  deviceId  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  prId      PeopleRegistry @relation(fields: [PR_ID], references: [PR_ID], onDelete: Cascade)

  @@unique([PR_ID, deviceId])
}

model PopulationStats {
  PS_ID           Int      @id @default(autoincrement())
  totalPopulation Int
  familyCount     Int
  createdAt       DateTime @default(now())

  @@map("POPULATION_STATS")
}

model DonationPayment {
  id                Int      @id @default(autoincrement())
  paymentId         String   @unique
  amount            Int
  currency          String
  status            String
  method            String
  captured          Boolean
  createdAt         DateTime @default(now())
  ENVIT_ID          Int
  JSON_LOG          String   @db.VarChar(4000)
  amount_refunded   Int
  bank              Int
  contact           String
  description       String
  entity            String
  error_code        String
  error_description String
  error_reason      String
  error_source      String
  error_step        String
  fee               Int
  international     Int
  invoice_id        String?
  order_id          String?
  refund_status     Int
  tax               Int
  vpa               Int
  wallet            Int
  PR_FULL_NAME      String
  email             String
  cate_id           Int      @default(0)
  PR_ID             Int
  Event             Events   @relation(fields: [ENVIT_ID], references: [ENVT_ID])

  @@index([ENVIT_ID], map: "DonationPayment_ENVIT_ID_fkey")
}

model Hobbies {
  HOBBY_ID         Int            @id @default(autoincrement())
  HOBBY_NAME       String         @db.VarChar(100)
  HOBBY_IMAGE_URL  String?        @db.VarChar(255)
  lang_code        String         @default("en") @db.VarChar(5)
  HOBBY_CREATED_AT DateTime       @default(now())
  HOBBY_CREATED_BY Int?
  HOBBY_UPDATED_AT DateTime?
  HOOBY_UPDATED_BY Int?
  translations     hobbies_lang[]
}

model hobbies_lang {
  id               Int       @map("HOBBY_ID")
  HOBBY_NAME       String    @db.VarChar(100)
  HOBBY_IMAGE_URL  String?   @db.VarChar(255)
  lang_code        String    @db.VarChar(5)
  HOBBY_CREATED_AT DateTime  @db.DateTime(0)
  HOBBY_CREATED_BY Int?
  HOBBY_UPDATED_AT DateTime? @db.DateTime(0)
  HOOBY_UPDATED_BY Int?
  hobby            Hobbies   @relation(fields: [id], references: [HOBBY_ID], onDelete: Cascade, onUpdate: Restrict)

  @@id([id, lang_code])
}

model City {
  CITY_ID         Int              @id @default(autoincrement())
  CITY_PIN_CODE   String?          @db.VarChar(20)
  CITY_NAME       String?          @db.VarChar(150)
  CITY_DS_CODE    String?          @default("default_ds_code") @db.VarChar(20)
  CITY_DS_NAME    String?          @default("default_ds_name") @db.VarChar(100)
  CITY_ST_CODE    String?          @default("default_st_code") @db.VarChar(20)
  CITY_ST_NAME    String?          @default("default_st_name") @db.VarChar(100)
  CITY_CREATED_BY Int?
  CITY_CREATED_AT DateTime         @default(now())
  CITY_UPDATED_BY Int?
  CITY_UPDATED_AT DateTime?
  lang_code       String           @default("en") @db.VarChar(5)
  PeopleRegistry  PeopleRegistry[]
  translations    city_lang[]

  @@map("CITY")
}

model city_lang {
  id              Int       @map("CITY_ID")
  CITY_PIN_CODE   String?   @db.VarChar(20)
  CITY_NAME       String?   @db.VarChar(150)
  CITY_DS_CODE    String?   @db.VarChar(20)
  CITY_DS_NAME    String?   @db.VarChar(100)
  CITY_ST_CODE    String?   @db.VarChar(20)
  CITY_ST_NAME    String?   @db.VarChar(100)
  CITY_CREATED_BY Int?
  CITY_CREATED_AT DateTime  @db.DateTime(0)
  CITY_UPDATED_BY Int?
  CITY_UPDATED_AT DateTime? @db.DateTime(0)
  lang_code       String    @db.VarChar(5)
  city            City      @relation(fields: [id], references: [CITY_ID], onDelete: Cascade, onUpdate: Restrict)

  @@id([id, lang_code])
}

model BUSSINESS {
  BUSS_ID         Int              @id @default(autoincrement())
  BUSS_STREM      String?          @db.VarChar(20)
  BUSS_TYPE       String?          @db.VarChar(20)
  BUSS_CREATED_AT DateTime         @default(now())
  BUSS_CREATED_BY Int?
  BUSS_UPDATED_AT DateTime?
  BUSS_UPDATED_BY Int?
  lang_code       String           @default("en") @db.VarChar(5)
  PeopleRegistry  PeopleRegistry[]
  translations    business_lang[]

  @@map("BUSSINESS")
}

model business_lang {
  id              Int       @map("BUSS_ID")
  BUSS_STREM      String?   @db.VarChar(20)
  BUSS_TYPE       String?   @db.VarChar(20)
  BUSS_CREATED_AT DateTime  @db.DateTime(0)
  BUSS_CREATED_BY Int?
  BUSS_UPDATED_AT DateTime? @db.DateTime(0)
  BUSS_UPDATED_BY Int?
  lang_code       String    @db.VarChar(5)
  business        BUSSINESS @relation(fields: [id], references: [BUSS_ID], onDelete: Cascade, onUpdate: Restrict)

  @@id([id, lang_code])
}

model Child {
  id     String         @id @default(uuid())
  name   String
  dob    DateTime
  userId Int
  user   PeopleRegistry @relation("UserChildren", fields: [userId], references: [PR_ID])

  @@index([userId], map: "Child_userId_fkey")
}

model Otp {
  id           String   @id @default(uuid())
  PR_MOBILE_NO String   @unique
  otp          String
  expiresAt    DateTime
}

model Contact {
  CON_ID          Int            @id @default(autoincrement())
  CON_TYPE        String         @db.Char(10)
  CON_NAME        String         @db.Char(50)
  CON_MOBILE_NO   String         @db.VarChar(20)
  CON_ATTACHMENT  String?        @db.Char(250)
  CON_MORE_DETAIL String         @db.VarChar(500)
  CON_RATING      Int?
  CON_ACTIVE_YN   String         @db.Char(1)
  CON_CREATED_BY  Int
  CON_CREATED_DT  DateTime       @default(now())
  CON_UPDATED_BY  Int?
  CON_UPDATED_DT  DateTime?
  lang_code       String         @default("en") @db.VarChar(5)
  PeopleRegistry  PeopleRegistry @relation(fields: [CON_CREATED_BY], references: [PR_ID])
  translations    contact_lang[]

  @@index([CON_CREATED_BY], map: "CONTACT_CON_CREATED_BY_fkey")
  @@map("CONTACT")
}

model contact_lang {
  id              Int       @map("CON_ID")
  CON_TYPE        String    @db.Char(10)
  CON_NAME        String    @db.Char(50)
  CON_MORE_DETAIL String    @db.VarChar(500)
  CON_ACTIVE_YN   String    @db.Char(1)
  CON_CREATED_BY  Int
  CON_CREATED_DT  DateTime  @db.DateTime(0)
  CON_UPDATED_BY  Int?
  CON_UPDATED_DT  DateTime? @db.DateTime(0)
  lang_code       String    @db.VarChar(5)
  contact         Contact   @relation(fields: [id], references: [CON_ID], onDelete: Cascade, onUpdate: Restrict)

  @@id([id, lang_code])
}

model Category {
  CATE_ID           Int             @id @default(autoincrement())
  CATE_CATE_ID      Int?
  CATE_DESC         String          @db.VarChar(50)
  CATE_ACTIVE_YN    String          @db.Char(1)
  CATE_CREATED_BY   Int
  CATE_CREATED_DT   DateTime        @default(now())
  CATE_UPDATED_BY   Int?
  CATE_UPDATED_DT   DateTime?
  lang_code         String          @default("en") @db.VarChar(5)
  ParentCategory    Category?       @relation("ParentChild", fields: [CATE_CATE_ID], references: [CATE_ID])
  SubCategories     Category[]      @relation("ParentChild")
  SubCategoryEvents Events[]        @relation("SubCategory")
  Events            Events[]
  translations      category_lang[]

  @@index([CATE_CATE_ID], map: "Category_CATE_CATE_ID_fkey")
}

model category_lang {
  id              Int       @map("CATE_ID")
  CATE_CATE_ID    Int?
  CATE_DESC       String    @db.VarChar(50)
  CATE_ACTIVE_YN  String    @db.Char(1)
  CATE_CREATED_BY Int
  CATE_CREATED_DT DateTime  @db.DateTime(0)
  CATE_UPDATED_BY Int?
  CATE_UPDATED_DT DateTime? @db.DateTime(0)
  lang_code       String    @db.VarChar(5)
  category        Category  @relation(fields: [id], references: [CATE_ID], onDelete: Cascade, onUpdate: Restrict)

  @@id([id, lang_code])
  @@index([CATE_CATE_ID])
}

model Events {
  ENVT_ID             Int               @id @default(autoincrement())
  ENVT_CATE_ID        Int
  ENVT_CATE_CATE_ID   Int?
  lang_code           String            @default("en") @db.VarChar(5)
  ENVT_DESC           String            @db.VarChar(50)
  ENVT_EXCERPT        String            @db.VarChar(250)
  ENVT_DETAIL         String            @db.VarChar(4000)
  ENVT_BANNER_IMAGE   String            @db.VarChar(250)
  ENVT_GALLERY_IMAGES String            @db.VarChar(500)
  ENVT_CONTACT_NO     String            @db.VarChar(20)
  ENVT_ADDRESS        String            @db.VarChar(500)
  ENVT_CITY           String            @db.VarChar(50)
  EVNT_FROM_DT        String            @db.VarChar(20)
  EVNT_UPTO_DT        String            @db.VarChar(20)
  EVET_ACTIVE_YN      String            @db.Char(1)
  EVET_CREATED_BY     Int
  EVET_CREATED_DT     DateTime          @default(now())
  EVET_UPDATED_BY     Int?
  EVET_UPDATED_DT     DateTime?
  DonationPayment     DonationPayment[]
  SubCategory         Category?         @relation("SubCategory", fields: [ENVT_CATE_CATE_ID], references: [CATE_ID])
  Category            Category          @relation(fields: [ENVT_CATE_ID], references: [CATE_ID])
  translations        events_lang[]

  @@index([ENVT_CATE_CATE_ID], map: "Events_ENVT_CATE_CATE_ID_fkey")
  @@index([ENVT_CATE_ID], map: "Events_ENVT_CATE_ID_fkey")
}

model events_lang {
  id                  Int       @map("ENVT_ID")
  ENVT_CATE_ID        Int
  ENVT_CATE_CATE_ID   Int?
  lang_code           String    @db.VarChar(5)
  ENVT_DESC           String    @db.VarChar(50)
  ENVT_EXCERPT        String    @db.VarChar(250)
  ENVT_DETAIL         String    @db.VarChar(4000)
  ENVT_BANNER_IMAGE   String    @db.VarChar(250)
  ENVT_GALLERY_IMAGES String    @db.VarChar(500)
  ENVT_CONTACT_NO     String    @db.VarChar(20)
  ENVT_ADDRESS        String    @db.VarChar(500)
  ENVT_CITY           String    @db.VarChar(50)
  EVNT_FROM_DT        String    @db.VarChar(20)
  EVNT_UPTO_DT        String    @db.VarChar(20)
  EVET_ACTIVE_YN      String    @db.Char(1)
  EVET_CREATED_BY     Int
  EVET_CREATED_DT     DateTime  @db.DateTime(0)
  EVET_UPDATED_BY     Int?
  EVET_UPDATED_DT     DateTime? @db.DateTime(0)
  event               Events    @relation(fields: [id], references: [ENVT_ID], onDelete: Cascade, onUpdate: Restrict)

  @@id([id, lang_code])
  @@index([ENVT_CATE_CATE_ID])
  @@index([ENVT_CATE_ID])
}

model LanguageContent {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  en        String?
  hi        String?
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model content_sections {
  id               Int                     @id @default(autoincrement())
  title            String                  @db.VarChar(50)
  id_id            Int?
  description      String                  @db.Text
  image_path       String?                 @db.VarChar(250)
  icon_path        String?                 @db.VarChar(250)
  active_yn        Int
  created_by       Int
  created_date     DateTime                @default(now()) @db.Date
  updated_by       Int?
  updated_date     DateTime?               @db.Date
  page_id          Int
  refrence_page_id Int?
  button_one       String?                 @db.VarChar(50)
  button_one_slug  String?                 @db.VarChar(100)
  button_two       String?                 @db.VarChar(50)
  button_two_slug  String?                 @db.VarChar(100)
  flex_01          String?                 @db.VarChar(250)
  lang_code        String                  @default("en") @db.VarChar(2)
  translations     content_sections_lang[]
}

model content_sections_lang {
  id               Int
  id_id            Int?
  title            String           @db.VarChar(50)
  description      String           @db.Text
  image_path       String?          @db.VarChar(250)
  icon_path        String?          @db.VarChar(250)
  active_yn        Int
  created_by       Int
  created_date     DateTime         @db.Date
  updated_by       Int?
  updated_date     DateTime?        @db.Date
  page_id          Int
  refrence_page_id Int?
  button_one       String?          @db.VarChar(50)
  button_one_slug  String?          @db.VarChar(100)
  button_two       String?          @db.VarChar(50)
  button_two_slug  String?          @db.VarChar(100)
  flex_01          String?          @db.VarChar(250)
  lang_code        String           @db.VarChar(5)
  content_section  content_sections @relation(fields: [id], references: [id])

  @@id([id, lang_code])
}

model pages {
  id           Int          @id @default(autoincrement())
  title        String       @db.VarChar(20)
  link_url     String       @unique @default("/") @db.VarChar(50)
  screen_type  String       @default("both") @db.VarChar(12)
  active_yn    Int
  created_by   Int
  created_date DateTime     @db.Date
  updated_by   Int?
  updated_date DateTime?    @db.Date
  lang_code    String       @default("en") @db.VarChar(5)
  translations pages_lang[]
}

model pages_lang {
  id           Int       @map("id")
  title        String    @db.VarChar(20)
  link_url     String    @unique @default("/") @db.VarChar(50)
  screen_type  String    @db.VarChar(12)
  active_yn    Int
  created_by   Int
  created_date DateTime  @db.Date
  updated_by   Int?
  updated_date DateTime? @db.Date
  lang_code    String    @db.VarChar(5)
  page         pages     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@id([id, lang_code])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model businesses {
  business_id     Int                       @id @default(autoincrement())
  business_name   String                    @db.VarChar(100)
  business_stream String                    @db.VarChar(50)
  business_type   String                    @db.VarChar(50)
  sub_category    String?                   @db.VarChar(50)
  business_model  businesses_business_model
  target_market   String?                   @db.VarChar(100)
  created_at      DateTime?                 @default(now()) @db.DateTime(0)
  is_active       Boolean?                  @default(true)
  notes           String?                   @db.Text
  lang_code       String                    @default("en") @db.VarChar(5)
  translations    businesses_lang[]
}

model businesses_lang {
  id              Int                       @map("business_id")
  business_name   String                    @db.VarChar(100)
  business_stream String                    @db.VarChar(50)
  business_type   String                    @db.VarChar(50)
  sub_category    String?                   @db.VarChar(50)
  business_model  businesses_business_model
  target_market   String?                   @db.VarChar(100)
  notes           String?                   @db.Text
  lang_code       String                    @db.VarChar(5)
  business        businesses                @relation(fields: [id], references: [business_id], onDelete: Cascade, onUpdate: Restrict)

  @@id([id, lang_code])
}

enum PR_ROLE {
  Admin    @map("Admin")
  End_User @map("End User")
  Master   @map("Master")
}

enum businesses_business_model {
  B2B
  B2C
  B2G
  C2C
  Hybrid
}
