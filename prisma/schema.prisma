generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Stream {
  STREAM_ID          Int      @id @default(autoincrement())
  STREAM_NAME        String?   @db.Char(50)
  STREAM_CREATED_BY  Int
  STREAM_CREATED_DT  DateTime @default(now())
  STREAM_UPDATED_BY  Int?
  STREAM_UPDATED_DT  DateTime?

}

model Education {
  EDUCATION_ID          Int      @id @default(autoincrement())
  EDUCATION_NAME        String?   @db.Char(50)
  EDUCATION_IMAGE_URL String? @db.VarChar(255)
  EDUCATION_CREATED_BY  Int
  EDUCATION_CREATED_DT  DateTime @default(now())
  EDUCATION_UPDATED_BY  Int?
  EDUCATION_UPDATED_DT  DateTime?

}

model Profession {
  PROF_ID          Int      @id @default(autoincrement())
  PROF_NAME        String?   @db.Char(50)
  PROF_DESC        String?   @db.Char(50)
  PROF_ACTIVE_YN   String   @db.Char(1)
  PROF_CREATED_BY  Int
  PROF_CREATED_DT  DateTime @default(now())
  PROF_UPDATED_BY  Int?
  PROF_UPDATED_DT  DateTime?
  PeopleRegistry   PeopleRegistry[]

  @@map("PROFESSION")
}

model PeopleRegistry {
  PR_ID            Int      @id @default(autoincrement())
  PR_UNIQUE_ID     String   @unique @db.VarChar(50)
  PR_PR_ID         Int?
  PR_FULL_NAME     String   @db.VarChar(100)
  PR_DOB           String
  PR_GENDER        String?  @db.Char(1)
  PR_MOBILE_NO     String   @db.VarChar(15)
  PR_PROFESSION_ID Int? 
  Profession    Profession? @relation(fields: [PR_PROFESSION_ID], references: [PROF_ID])
  PR_PROFESSION_DETA  String? @db.VarChar(500)
  PR_EDUCATION     String?  @db.VarChar(20)
  PR_EDUCATION_DESC String? @db.VarChar(500)
  PR_ADDRESS       String  @db.Text
  PR_PIN_CODE      String  
  PR_AREA_NAME     String  @db.VarChar(100)
  PR_CITY_CODE     Int?
  City             City? @relation(fields: [PR_CITY_CODE], references: [CITY_ID], onDelete: SetNull)
  PR_STATE_CODE    String?   @db.Char(20)
  PR_DISTRICT_CODE String?   @db.Char(20)      
  PR_FAMILY_NO     String?   @db.Char(4)
  PR_MEMBER_NO     String?   @db.Char(4)
  // PR_FATHER_ID     Int?     
  // PR_MOTHER_ID     Int?     
  // PR_SPOUSE_ID     Int? 
   PR_FATHER_ID     String?   // Changed from Int? to String?
  PR_MOTHER_ID     String?   // Changed from Int? to String?
  PR_SPOUSE_ID     String?   // Changed from Int? to String?
  PR_MARRIED_YN    String? @db.Char(1)
  PR_FATHER_NAME     String?   @db.VarChar(100) 
  PR_MOTHER_NAME     String?   @db.VarChar(100)
  PR_SPOUSE_NAME     String?   @db.VarChar(100)
  Children         Child[] @relation("UserChildren")
  PR_BUSS_CODE     Int?
  BUSSINESS        BUSSINESS? @relation(fields: [PR_BUSS_CODE], references: [BUSS_ID], onDelete: SetNull)
  PR_BUSS_INTER    String? @db.Char(1)
  PR_BUSS_STREAM   String? @db.VarChar(20)
  PR_BUSS_TYPE     String? @db.VarChar(20)
   PR_HOBBY        String? @db.VarChar(200)
   PR_IS_COMPLETED String? @db.Char(1) @default("N")

  
  PR_PHOTO_URL     String?  @db.VarChar(255)
  PR_CREATED_BY    Int?     
  PR_CREATED_AT    DateTime @default(now())
  PR_UPDATED_BY    Int?     
  PR_UPDATED_AT    DateTime?
    PR_ROLE          PR_ROLE    @default(End_User) 
  // Hobbies PR_Hobbies[]  

  // Children         Child[] @relation("UserChildren")
  // Contact          Contact[]

  // Self-referencing relations for family
  // Father           PeopleRegistry? @relation("FatherRelation", fields: [PR_FATHER_ID], references: [PR_ID])
  // Mother           PeopleRegistry? @relation("MotherRelation", fields: [PR_MOTHER_ID], references: [PR_ID])
  // Spouse           PeopleRegistry? @relation("SpouseRelation", fields: [PR_SPOUSE_ID], references: [PR_ID])

  // FatherOf         PeopleRegistry[] @relation("FatherRelation")
  // MotherOf         PeopleRegistry[] @relation("MotherRelation")
  // SpouseOf         PeopleRegistry[] @relation("SpouseRelation")
    Father           PeopleRegistry? @relation("FatherRelation", fields: [PR_FATHER_ID], references: [PR_UNIQUE_ID])
  Mother           PeopleRegistry? @relation("MotherRelation", fields: [PR_MOTHER_ID], references: [PR_UNIQUE_ID])
  Spouse           PeopleRegistry? @relation("SpouseRelation", fields: [PR_SPOUSE_ID], references: [PR_UNIQUE_ID])

  FatherOf         PeopleRegistry[] @relation("FatherRelation")
  MotherOf         PeopleRegistry[] @relation("MotherRelation")
  SpouseOf         PeopleRegistry[] @relation("SpouseRelation")


 
  @@unique([PR_MOBILE_NO, PR_FULL_NAME])
  
  // @@unique([PR_FATHER_ID])
  // @@unique([PR_MOTHER_ID])
  // @@unique([PR_SPOUSE_ID])

  @@index([PR_STATE_CODE])
  @@index([PR_DISTRICT_CODE])

  @@map("PEOPLE_REGISTRY")

  Contact Contact[]
}



model PopulationStats {
  PS_ID          Int      @id @default(autoincrement())
  totalPopulation Int
  familyCount     Int
  createdAt      DateTime @default(now())
  
  @@map("POPULATION_STATS")
}

model DonationPayment {
  id        Int      @id @default(autoincrement())
  ENVIT_ID  Int
  
  PR_ID     Int 
   PR_FULL_NAME      String   
  paymentId String   @unique
  entity String
  amount    Int
  currency  String
  status    String
  order_id   String?   // instead of Int?
  invoice_id String?   // instead of Int?
  international Int 
  method    String
  amount_refunded   Int
  refund_status Int
  captured  Boolean
  description String
  bank Int
  wallet Int
  vpa Int
  email String
  contact String
  fee Int
  tax Int
  error_code String
  error_description String
  error_source String
  error_step String
  error_reason String
  JSON_LOG String @db.VarChar(4000)
  createdAt DateTime @default(now())
  cate_id Int @default(0)

Event      Events?   @relation(fields: [ENVIT_ID], references: [ENVT_ID])
}

enum PR_ROLE {
  Admin     @map("Admin")
  End_User  @map("End User")
  Master    @map("Master")
}

model Hobbies {
  HOBBY_ID   Int    @id @default(autoincrement())
  HOBBY_NAME String  @db.VarChar(100)
  HOBBY_IMAGE_URL String? @db.VarChar(255)
  HOBBY_CREATED_BY Int?
  HOBBY_CREATED_AT DateTime @default(now())
  HOOBY_UPDATED_BY Int?
  HOBBY_UPDATED_AT DateTime?

  // PR_Hobbies PR_Hobbies[] 
}





model City {
  CITY_ID         Int      @id @default(autoincrement()) 
  CITY_PIN_CODE   String?  @db.VarChar(20)  // Renamed from `pincode` @unique @unique 
  // CITY_CODE       Int?
  CITY_NAME       String?  @db.VarChar(150)
  CITY_DS_CODE    String?  @db.VarChar(20)  @default("default_ds_code")
  CITY_DS_NAME    String?  @db.VarChar(100) @default("default_ds_name")
  CITY_ST_CODE    String?  @db.VarChar(20)  @default("default_st_code")
  CITY_ST_NAME    String?  @db.VarChar(100) @default("default_st_name")
  CITY_CREATED_BY Int?
  CITY_CREATED_AT DateTime @default(now())
  CITY_UPDATED_BY Int?
  CITY_UPDATED_AT DateTime?


  // Self-relation for hierarchical cities (e.g., districts within cities)
  

  PeopleRegistry PeopleRegistry[]
  @@map("CITY")
}

model BUSSINESS {
  BUSS_ID         Int      @id @default(autoincrement()) 
  BUSS_STREM   String?  @db.VarChar(20)
  BUSS_TYPE   String?  @db.VarChar(20)                
  // BUSS_INTER       String?  @db.Char(1)
  BUSS_CREATED_BY Int?
  BUSS_CREATED_AT DateTime @default(now())
  BUSS_UPDATED_BY Int?
  BUSS_UPDATED_AT DateTime?



  @@map("BUSSINESS")

  PeopleRegistry PeopleRegistry[]
}



model Child {
  id       String   @id @default(uuid())
  name     String
  dob      DateTime
    userId   Int
  user PeopleRegistry @relation("UserChildren", fields: [userId], references: [PR_ID])

}

model Otp {
  id           String  @id @default(uuid())
  PR_MOBILE_NO String  @unique
  otp          String
  expiresAt    DateTime
}
enum ContactType {
  FEEDBACK
  CONTACT
}


model Contact {
  CON_ID          Int      @id @default(autoincrement())
  CON_TYPE        String   @db.Char(10) // Enum for 'FEEDBACK' or 'CONTACT'
  CON_NAME        String   @db.Char(50) // Required name field
  CON_MOBILE_NO   String   @db.VarChar(20) // Required mobile number
  CON_ATTACHMENT  String?  @db.Char(250) // Optional attachment
  CON_MORE_DETAIL String  @db.VarChar(500) // Optional more details
  CON_RATING      Int?     // Optional rating
  CON_ACTIVE_YN   String   @db.Char(1) // Active flag ('Y' or 'N')
  CON_CREATED_BY  Int      // User ID for the creator
  PeopleRegistry PeopleRegistry? @relation(fields: [CON_CREATED_BY], references: [PR_ID])
  CON_CREATED_DT  DateTime @default(now()) // Creation date
  CON_UPDATED_BY  Int?     // User ID for the updater (optional)
  CON_UPDATED_DT  DateTime? // Updated date (optional)

  @@map("CONTACT")

}


model Category {
  CATE_ID        Int     @id @default(autoincrement())
  CATE_CATE_ID   Int?    
  CATE_DESC      String  @db.VarChar(50)
  CATE_ACTIVE_YN String  @db.Char(1)
  CATE_CREATED_BY Int
  CATE_CREATED_DT DateTime @default(now())
  CATE_UPDATED_BY Int?
  CATE_UPDATED_DT DateTime?

  ParentCategory  Category?  @relation("ParentChild", fields: [CATE_CATE_ID], references: [CATE_ID], onDelete: SetNull)
  SubCategories     Category[] @relation("ParentChild")
  SubCategoryEvents Events[]   @relation("SubCategory") // Opposite relation field for SubCategory
  Events      Events[]  // ✅ One-to-Many Relationship (Category has multiple Events)
}

model Events {
  ENVT_ID            Int     @id @default(autoincrement())
  ENVT_CATE_ID       Int
  ENVT_CATE_CATE_ID  Int?
  ENVT_DESC          String  @db.VarChar(50)
  ENVT_EXCERPT       String  @db.VarChar(250)
  ENVT_DETAIL        String  @db.VarChar(4000)
  ENVT_BANNER_IMAGE  String  @db.VarChar(250)
  ENVT_GALLERY_IMAGES String @db.VarChar(500)
  ENVT_CONTACT_NO    String  @db.VarChar(20)
  ENVT_ADDRESS       String  @db.VarChar(500)
  ENVT_CITY          String  @db.VarChar(50)
  EVNT_FROM_DT       String  @db.VarChar(20)
  EVNT_UPTO_DT       String  @db.VarChar(20)  
  EVET_ACTIVE_YN     String  @db.Char(1)
  EVET_CREATED_BY    Int
  EVET_CREATED_DT    DateTime @default(now())
  EVET_UPDATED_BY    Int?
  EVET_UPDATED_DT    DateTime?

  Category          Category @relation(fields: [ENVT_CATE_ID], references: [CATE_ID]) // ✅ Correct One-to-Many
  SubCategory         Category? @relation("SubCategory", fields: [ENVT_CATE_CATE_ID], references: [CATE_ID])


  DonationPayment DonationPayment[]
}




//Database Architecure hei